[
    {
        "id": "14d6892b9a074587",
        "type": "tab",
        "label": "DWD Stellio NGSI-LD",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c41b7248cee84bf3",
        "type": "tab",
        "label": "Stellio Setup",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0aabdc139449829a",
        "type": "tab",
        "label": "Environment",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9bb62de76d856a4d",
        "type": "group",
        "z": "c41b7248cee84bf3",
        "name": "Get Subscriptions",
        "style": {
            "stroke": "#ffefbf",
            "fill": "#ffff7f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "2e36820119375021",
            "080ab472d262251c",
            "c75e48673f6853fc",
            "bdc544139ebcbdf3"
        ],
        "x": 54,
        "y": 39,
        "w": 872,
        "h": 82
    },
    {
        "id": "6dd86781514dcb3a",
        "type": "group",
        "z": "c41b7248cee84bf3",
        "name": "Delete Subscription (Stellio)",
        "style": {
            "stroke": "#ffefbf",
            "fill": "#ff7f7f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "10be74007c50d1aa",
            "4e70e0215b15eddc",
            "acbc43b901b13459",
            "0846d8739a3a413e"
        ],
        "x": 54,
        "y": 399,
        "w": 872,
        "h": 82
    },
    {
        "id": "ac0b1ae0b3d6d0d5",
        "type": "group",
        "z": "c41b7248cee84bf3",
        "name": "Create subscription - WeatherObserved",
        "style": {
            "fill": "#c8e7a7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "50f6c90273d64dec",
            "9e13e3cb6787596e",
            "af2b75ee75418e36",
            "efc1dbde7ca33800",
            "2a90adb0c7c87f69",
            "bc522295a33c44e8",
            "e22b47130cab0aff",
            "922ae5c915dbfef5",
            "dd05473a52b6b668",
            "c345fc4b7d75c548",
            "b9cf21e32692ba9f",
            "d2761ddb666dd807"
        ],
        "x": 54,
        "y": 139,
        "w": 1292,
        "h": 242
    },
    {
        "id": "40411f41f2a1329e",
        "type": "group",
        "z": "c41b7248cee84bf3",
        "name": "Delete entity",
        "style": {
            "stroke": "#ffefbf",
            "fill": "#ff7f7f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "7a1e7516db7233dd",
            "0a5fa65bb808e3f5",
            "981249c2044a8134",
            "773aa9ef6eb2d64d"
        ],
        "x": 54,
        "y": 499,
        "w": 872,
        "h": 82
    },
    {
        "id": "8547a3b818800650",
        "type": "group",
        "z": "14d6892b9a074587",
        "name": "Send to platform",
        "style": {
            "fill": "#dbcbe7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ba03599af14974d5",
            "bea5eb1b57b93a8c",
            "48cb872bad447837",
            "e877cd13dd0095ee"
        ],
        "x": 1034,
        "y": 639,
        "w": 512,
        "h": 182
    },
    {
        "id": "db407cc6de5d87f9",
        "type": "group",
        "z": "c41b7248cee84bf3",
        "name": "Create subscription - WeatherForecast",
        "style": {
            "fill": "#c8e7a7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "e526c238784a6726",
            "0cfceafdeea8f353",
            "f5a278a18ffda563",
            "40352197556535f8",
            "f61eda6655aa56de",
            "efc3e6cd1f6b238a",
            "43b88dd053b05891",
            "76e9a5ca014009e0",
            "e3a2b9122e39ce50",
            "6ebaf929cb8dbb67",
            "d5ed8f1c0db93461",
            "300d380e5acaa002"
        ],
        "x": 54,
        "y": 619,
        "w": 1272,
        "h": 242
    },
    {
        "id": "a387eae66b26066e",
        "type": "inject",
        "z": "14d6892b9a074587",
        "name": "Trigger APIs",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "0 0-23 * * *",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "{}",
        "payloadType": "str",
        "x": 240,
        "y": 120,
        "wires": [
            [
                "3eeb2f961108812e"
            ]
        ]
    },
    {
        "id": "2baf06812dc8386e",
        "type": "comment",
        "z": "14d6892b9a074587",
        "name": "Get current weather data from DWD for one MOSMIXID",
        "info": "",
        "x": 320,
        "y": 160,
        "wires": []
    },
    {
        "id": "8a466f0437131e58",
        "type": "function",
        "z": "14d6892b9a074587",
        "name": "Save DWD Response",
        "func": "msg.dwd = msg.payload;\n\nmsg.sensor = {}\nmsg.sensor.id = msg.payload.station\nmsg.sensor.name = msg.payload.station\nmsg.sensor.url = \"https://dwd.de\"\nmsg.sensor.coordinates = { lon: 0, lat: 0 }\nmsg.sensor.timestamp = msg.payload.forecast_dt\nmsg.sensor.observed_at = (new Date()).toISOString()\n\nmsg.sensor.temperature = msg.payload.tempc\nmsg.sensor.humidity = msg.payload.humidity\nmsg.sensor.pressure = 0\nmsg.sensor.windDirection = msg.payload.winddirection\nmsg.sensor.windSpeed = msg.payload.windspeed\nmsg.sensor.precipitation = msg.payload.DRR1\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            [
                "34082adebd7a1d5c"
            ]
        ]
    },
    {
        "id": "15229af1a8237c6b",
        "type": "debug",
        "z": "14d6892b9a074587",
        "name": "KN",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 300,
        "wires": []
    },
    {
        "id": "bac5c01ecbbd028b",
        "type": "inject",
        "z": "14d6892b9a074587",
        "name": "Trigger APIs",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "0 0-23 * * *",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "{}",
        "payloadType": "str",
        "x": 240,
        "y": 380,
        "wires": [
            [
                "99782b52aa252774"
            ]
        ]
    },
    {
        "id": "3392d8454ea8befb",
        "type": "comment",
        "z": "14d6892b9a074587",
        "name": "Get current weather data from DWD for one MOSMIXID",
        "info": "",
        "x": 320,
        "y": 420,
        "wires": []
    },
    {
        "id": "3293bb16f63798cd",
        "type": "function",
        "z": "14d6892b9a074587",
        "name": "Save DWD Response",
        "func": "msg.dwd = msg.payload;\n\nmsg.sensor = {}\nmsg.sensor.id = msg.payload.station\nmsg.sensor.name = msg.payload.station\nmsg.sensor.url = \"https://dwd.de\"\nmsg.sensor.coordinates = { lon: 0, lat: 0 }\nmsg.sensor.timestamp = msg.payload.forecast_dt\nmsg.sensor.observed_at = (new Date()).toISOString()\n\nmsg.sensor.temperature = msg.payload.tempc\nmsg.sensor.humidity = msg.payload.humidity\nmsg.sensor.pressure = 0\nmsg.sensor.windDirection = msg.payload.winddirection\nmsg.sensor.windSpeed = msg.payload.windspeed\nmsg.sensor.precipitation_perc = msg.payload.precipitation_perc\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 520,
        "wires": [
            [
                "a4ac0ec765a3d716"
            ]
        ]
    },
    {
        "id": "0f83fc9855abfb06",
        "type": "debug",
        "z": "14d6892b9a074587",
        "name": "KN-FC1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 580,
        "wires": []
    },
    {
        "id": "7a123411c929fb50",
        "type": "inject",
        "z": "14d6892b9a074587",
        "name": "Trigger APIs",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "0 0-23 * * *",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "payload": "{}",
        "payloadType": "str",
        "x": 240,
        "y": 640,
        "wires": [
            [
                "e88980e3a7d55609"
            ]
        ]
    },
    {
        "id": "049504dada535934",
        "type": "comment",
        "z": "14d6892b9a074587",
        "name": "Get current weather data from DWD for one MOSMIXID",
        "info": "",
        "x": 320,
        "y": 680,
        "wires": []
    },
    {
        "id": "ec8d3344081044da",
        "type": "function",
        "z": "14d6892b9a074587",
        "name": "Save DWD Response",
        "func": "msg.dwd = msg.payload;\n\nmsg.sensor = {}\nmsg.sensor.id = msg.payload.station\nmsg.sensor.name = msg.payload.station\nmsg.sensor.url = \"https://dwd.de\"\nmsg.sensor.coordinates = { lon: 0, lat: 0 }\nmsg.sensor.timestamp = msg.payload.forecast_dt\nmsg.sensor.observed_at = (new Date()).toISOString()\n\nmsg.sensor.temperature = msg.payload.tempc\nmsg.sensor.humidity = msg.payload.humidity\nmsg.sensor.pressure = 0\nmsg.sensor.windDirection = msg.payload.winddirection\nmsg.sensor.windSpeed = msg.payload.windspeed\nmsg.sensor.precipitation_perc = msg.payload.precipitation_perc\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 340,
        "y": 760,
        "wires": [
            [
                "dd97d2d8c0437f03"
            ]
        ]
    },
    {
        "id": "9ddd60364c3f6c51",
        "type": "debug",
        "z": "14d6892b9a074587",
        "name": "KN-FC2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 840,
        "wires": []
    },
    {
        "id": "34082adebd7a1d5c",
        "type": "function",
        "z": "14d6892b9a074587",
        "name": "Create WeatherObserved datamodel",
        "func": "msg.values = {}\n\nif('pressure' in msg.sensor) {\n    msg.values.atmosphericPressure = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.pressure,\n        \"observedAt\": new Date(msg.sensor.timestamp).toISOString()\n    }\n}\n\nif ('temperature' in msg.sensor && msg.sensor[\"temperature\"]) {\n    msg.values.temperature = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.temperature,\n        \"observedAt\": new Date(msg.sensor.timestamp).toISOString()\n    }\n}\n\nif ('windDirection' in msg.sensor && msg.sensor[\"windDirection\"]) {\n    msg.values.windDirection = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.windDirection,\n        \"observedAt\": new Date(msg.sensor.timestamp).toISOString()\n    }\n}\n\nif ('windSpeed' in msg.sensor && msg.sensor[\"windSpeed\"]) {\n    msg.values.windSpeed = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.windSpeed,\n        \"observedAt\": new Date(msg.sensor.timestamp).toISOString()\n    }\n}\n\nif ('timestamp' in msg.sensor && msg.sensor[\"timestamp\"]) {\n    msg.values.dateObserved = {\n        \"type\": \"Property\",\n        \"value\": new Date(msg.sensor.timestamp).toISOString()\n    }\n}\n\nif ('precipitation' in msg.sensor && msg.sensor[\"precipitation\"]) {\n    msg.values.precipitation = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.precipitation,\n        \"observedAt\": new Date(msg.sensor.timestamp).toISOString()\n    }\n}\n\nif ('pressureTendency' in msg.sensor && msg.sensor[\"pressureTendency\"]) {\n    msg.values.pressureTendency = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.pressureTendency,\n        \"observedAt\": new Date(msg.sensor.timestamp).toISOString()\n    }\n}\n\nif ('humidity' in msg.sensor && msg.sensor[\"humidity\"]) {\n    msg.values.relativeHumidity = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.humidity,\n        \"observedAt\": new Date(msg.sensor.timestamp).toISOString()\n    }\n}\n\n\nmsg.payload = [{ ...msg.values,\n    ...{\n        \"id\": \"urn:ngsi-ld:WeatherObserved:DWD-Weather-\" + msg.sensor.id,\n        \"type\": \"WeatherObserved\",\n        \"@context\": [\n            `https://context.${ env.get(\"DOMAIN\") }/main-context.jsonld`\n            ]    \n        }\n}]\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 300,
        "wires": [
            [
                "15229af1a8237c6b",
                "dca7dad5b77a9e5e"
            ]
        ]
    },
    {
        "id": "dca7dad5b77a9e5e",
        "type": "function",
        "z": "14d6892b9a074587",
        "name": "filter out undefined fields",
        "func": "for (let [index, entity] of msg.payload.entries()) {\n    for (let [field, jsonValue] of Object.entries(entity)) {\n        if (field === 'id' || field === 'type' || field === '@context') {\n            continue\n        }\n        if (jsonValue.value === undefined || jsonValue.value === null) {\n            delete msg.payload[index][field];\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 520,
        "wires": [
            [
                "bea5eb1b57b93a8c"
            ]
        ]
    },
    {
        "id": "ba03599af14974d5",
        "type": "debug",
        "z": "14d6892b9a074587",
        "g": "8547a3b818800650",
        "name": "debug post",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 680,
        "wires": []
    },
    {
        "id": "bea5eb1b57b93a8c",
        "type": "function",
        "z": "14d6892b9a074587",
        "g": "8547a3b818800650",
        "name": "Prepare POST",
        "func": "msg.url =  env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1/entityOperations/upsert?options=update\";\n\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/ld+json';\nmsg.headers['NGSILD-Tenant'] = env.get(\"FIWARE_SERVICE\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 680,
        "wires": [
            [
                "ba03599af14974d5",
                "48cb872bad447837"
            ]
        ]
    },
    {
        "id": "48cb872bad447837",
        "type": "http request",
        "z": "14d6892b9a074587",
        "g": "8547a3b818800650",
        "name": "POST to Stellio",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1160,
        "y": 780,
        "wires": [
            [
                "e877cd13dd0095ee"
            ]
        ]
    },
    {
        "id": "e877cd13dd0095ee",
        "type": "debug",
        "z": "14d6892b9a074587",
        "g": "8547a3b818800650",
        "name": "Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1380,
        "y": 780,
        "wires": []
    },
    {
        "id": "a4ac0ec765a3d716",
        "type": "function",
        "z": "14d6892b9a074587",
        "name": "Create WeatherObserved datamodel",
        "func": "msg.values = {}\n\nif('pressure' in msg.sensor) {\n    msg.values.atmosphericPressure = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.pressure,\n        \"observedAt\": new Date().toISOString()\n    }\n}\n\nif ('temperature' in msg.sensor && msg.sensor[\"temperature\"]) {\n    msg.values.temperature = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.temperature,\n        \"observedAt\": new Date().toISOString()\n    }\n}\n\nif ('windDirection' in msg.sensor && msg.sensor[\"windDirection\"]) {\n    msg.values.windDirection = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.windDirection,\n        \"observedAt\": new Date().toISOString()\n    }\n}\n\nif ('windSpeed' in msg.sensor && msg.sensor[\"windSpeed\"]) {\n    msg.values.windSpeed = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.windSpeed,\n        \"observedAt\": new Date().toISOString()\n    }\n}\n\nif ('timestamp' in msg.sensor && msg.sensor[\"timestamp\"]) {\n    msg.values.dateObserved = {\n        \"type\": \"Property\",\n        \"value\": new Date().toISOString()\n    }\n}\n\nif ('humidity' in msg.sensor && msg.sensor[\"humidity\"]) {\n    msg.values.relativeHumidity = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.humidity,\n        \"observedAt\": new Date().toISOString()\n    }\n}\n\nif ('precipitation_perc' in msg.sensor) {\n    msg.values.precipitationProbability = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.precipitation_perc,\n        \"observedAt\": new Date().toISOString()\n    }\n}\n\nmsg.payload = [{ ...msg.values,\n    ...{\n        \"id\": \"urn:ngsi-ld:WeatherForecast:DWD-Weather-FC1-\" + msg.sensor.id,\n        \"type\": \"WeatherForecast\",\n        \"@context\": [\n            `https://context.${ env.get(\"DOMAIN\") }/main-context.jsonld`\n            ]    \n        },\n        \"validFrom\": {\n            \"type\": \"Property\",\n            \"value\": {\n                \"@type\": \"DateTime\",\n                \"@value\": new Date(msg.sensor.timestamp).toISOString()\n            },\n            \"observedAt\": new Date().toISOString()\n    },\n}]\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 580,
        "wires": [
            [
                "0f83fc9855abfb06",
                "dca7dad5b77a9e5e"
            ]
        ]
    },
    {
        "id": "dd97d2d8c0437f03",
        "type": "function",
        "z": "14d6892b9a074587",
        "name": "Create WeatherObserved datamodel",
        "func": "msg.values = {}\n\nif('pressure' in msg.sensor) {\n    msg.values.atmosphericPressure = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.pressure,\n        \"observedAt\": new Date().toISOString()\n    }\n}\n\nif ('temperature' in msg.sensor && msg.sensor[\"temperature\"]) {\n    msg.values.temperature = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.temperature,\n        \"observedAt\": new Date().toISOString()\n    }\n}\n\nif ('windDirection' in msg.sensor && msg.sensor[\"windDirection\"]) {\n    msg.values.windDirection = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.windDirection,\n        \"observedAt\": new Date().toISOString()\n    }\n}\n\nif ('windSpeed' in msg.sensor && msg.sensor[\"windSpeed\"]) {\n    msg.values.windSpeed = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.windSpeed,\n        \"observedAt\": new Date().toISOString()\n    }\n}\n\nif ('timestamp' in msg.sensor && msg.sensor[\"timestamp\"]) {\n    msg.values.dateObserved = {\n        \"type\": \"Property\",\n        \"value\": new Date().toISOString()\n    }\n}\n\nif ('humidity' in msg.sensor && msg.sensor[\"humidity\"]) {\n    msg.values.relativeHumidity = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.humidity,\n        \"observedAt\": new Date().toISOString()\n    }\n}\n\nif ('precipitation_perc' in msg.sensor) {\n    msg.values.precipitationProbability = {\n        \"type\": \"Property\",\n        \"value\": msg.sensor.precipitation_perc,\n        \"observedAt\": new Date().toISOString()\n    }\n}\n\nmsg.payload = [{ ...msg.values,\n    ...{\n        \"id\": \"urn:ngsi-ld:WeatherForecast:DWD-Weather-FC2-\" + msg.sensor.id,\n        \"type\": \"WeatherForecast\",\n        \"@context\": [\n            `https://context.${ env.get(\"DOMAIN\") }/main-context.jsonld`\n            ]    \n        },\n        \"validFrom\": {\n            \"type\": \"Property\",\n            \"value\": {\n                \"@type\": \"DateTime\",\n                \"@value\": new Date(msg.sensor.timestamp).toISOString()\n            },\n            \"observedAt\": new Date().toISOString()\n    },\n}]\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 840,
        "wires": [
            [
                "9ddd60364c3f6c51",
                "dca7dad5b77a9e5e"
            ]
        ]
    },
    {
        "id": "3eeb2f961108812e",
        "type": "dwdweather",
        "z": "14d6892b9a074587",
        "name": "Konstanz - current",
        "mosmixStation": "10929",
        "lookAheadHours": "0",
        "additionalFields": "DRR1",
        "omitMessageOnStart": false,
        "repeat": "0",
        "topic": "",
        "x": 290,
        "y": 200,
        "wires": [
            [
                "8a466f0437131e58"
            ]
        ]
    },
    {
        "id": "99782b52aa252774",
        "type": "dwdweather",
        "z": "14d6892b9a074587",
        "name": "Konstanz - 1 day forecast",
        "mosmixStation": "10929",
        "lookAheadHours": "24",
        "additionalFields": "DRR1",
        "omitMessageOnStart": false,
        "repeat": "0",
        "topic": "",
        "x": 310,
        "y": 460,
        "wires": [
            [
                "3293bb16f63798cd"
            ]
        ]
    },
    {
        "id": "e88980e3a7d55609",
        "type": "dwdweather",
        "z": "14d6892b9a074587",
        "name": "Konstanz - 2 day forecast",
        "mosmixStation": "10929",
        "lookAheadHours": "48",
        "additionalFields": "DRR1",
        "omitMessageOnStart": false,
        "repeat": "0",
        "topic": "",
        "x": 290,
        "y": 720,
        "wires": [
            [
                "ec8d3344081044da"
            ]
        ]
    },
    {
        "id": "2e36820119375021",
        "type": "inject",
        "z": "c41b7248cee84bf3",
        "g": "9bb62de76d856a4d",
        "name": "Go!",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "080ab472d262251c"
            ]
        ]
    },
    {
        "id": "080ab472d262251c",
        "type": "function",
        "z": "c41b7248cee84bf3",
        "g": "9bb62de76d856a4d",
        "name": "Setup GET Request",
        "func": "msg.url = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1/subscriptions/?limit=100\";\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/ld+json';\nmsg.headers['NGSILD-Tenant'] = env.get(\"FIWARE_SERVICE\");\nmsg.payload = undefined;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 80,
        "wires": [
            [
                "c75e48673f6853fc",
                "fd550fcf054d0df1"
            ]
        ]
    },
    {
        "id": "c75e48673f6853fc",
        "type": "http request",
        "z": "c41b7248cee84bf3",
        "g": "9bb62de76d856a4d",
        "name": "http GET Request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 80,
        "wires": [
            [
                "bdc544139ebcbdf3"
            ]
        ]
    },
    {
        "id": "bdc544139ebcbdf3",
        "type": "debug",
        "z": "c41b7248cee84bf3",
        "g": "9bb62de76d856a4d",
        "name": "debug 61",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 820,
        "y": 80,
        "wires": []
    },
    {
        "id": "10be74007c50d1aa",
        "type": "inject",
        "z": "c41b7248cee84bf3",
        "g": "6dd86781514dcb3a",
        "name": "Go!",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 440,
        "wires": [
            [
                "4e70e0215b15eddc"
            ]
        ]
    },
    {
        "id": "4e70e0215b15eddc",
        "type": "function",
        "z": "c41b7248cee84bf3",
        "g": "6dd86781514dcb3a",
        "name": "Setup Request",
        "func": "msg.url = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1/subscriptions/urn:ngsi-ld:Subscription:9b952583-0fb7-48e9-94d4-4c315623ae93\";\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/ld+json';\nmsg.headers['NGSILD-Tenant'] = env.get(\"FIWARE_SERVICE\");\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 440,
        "wires": [
            [
                "acbc43b901b13459"
            ]
        ]
    },
    {
        "id": "acbc43b901b13459",
        "type": "http request",
        "z": "c41b7248cee84bf3",
        "g": "6dd86781514dcb3a",
        "name": "DELETE",
        "method": "DELETE",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 580,
        "y": 440,
        "wires": [
            [
                "0846d8739a3a413e"
            ]
        ]
    },
    {
        "id": "0846d8739a3a413e",
        "type": "debug",
        "z": "c41b7248cee84bf3",
        "g": "6dd86781514dcb3a",
        "name": "debug 84",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 820,
        "y": 440,
        "wires": []
    },
    {
        "id": "50f6c90273d64dec",
        "type": "http request",
        "z": "c41b7248cee84bf3",
        "g": "ac0b1ae0b3d6d0d5",
        "name": "http POST Request",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 340,
        "wires": [
            [
                "af2b75ee75418e36"
            ]
        ]
    },
    {
        "id": "9e13e3cb6787596e",
        "type": "inject",
        "z": "c41b7248cee84bf3",
        "g": "ac0b1ae0b3d6d0d5",
        "name": "Go!",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "bc522295a33c44e8"
            ]
        ]
    },
    {
        "id": "af2b75ee75418e36",
        "type": "debug",
        "z": "c41b7248cee84bf3",
        "g": "ac0b1ae0b3d6d0d5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 750,
        "y": 340,
        "wires": []
    },
    {
        "id": "efc1dbde7ca33800",
        "type": "function",
        "z": "c41b7248cee84bf3",
        "g": "ac0b1ae0b3d6d0d5",
        "name": "Setup Request",
        "func": "msg.url = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1/subscriptions\";\n\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/ld+json';\nmsg.headers['NGSILD-Tenant'] = env.get(\"FIWARE_SERVICE\");\n\nmsg.payload = {\n   \t\"type\": \"Subscription\",\n\t\"subscriptionName\": \"Subscription for entity type \" + msg.dataModel + \".\",\n\t\"description\": \"This subscription triggers everytime an entity from type \" + msg.dataModel + \" is updated. Only watching attribute dateObserved to avoid duplications.\",\n   \t\"entities\": [\n\t\t{\n\t\t\t\"type\": msg.dataModel\n   \t\t}\n\t],\n    \"watchedAttributes\": [\"dateObserved\"],\n\t\"notificationTrigger\": [\"entityCreated\", \"attributeCreated\", \"attributeUpdated\"],\n    \"notification\": {\n       \t\"format\": \"normalized\",\n       \t\"endpoint\": {\n\t\t\t\t  \"uri\": env.get(\"QL_LD_API_URL\") + \"/v2/notify\",\n          \t\"accept\": \"application/json\"\n       \t}\n    },\n    \"@context\": [\n\t\t`https://context.${ env.get(\"DOMAIN\") }/main-context.jsonld`\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 340,
        "wires": [
            [
                "50f6c90273d64dec"
            ]
        ]
    },
    {
        "id": "2a90adb0c7c87f69",
        "type": "function",
        "z": "c41b7248cee84bf3",
        "g": "ac0b1ae0b3d6d0d5",
        "name": "Check if already exists",
        "func": "msg.sub_exists = false;\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const type = msg.payload[i].entities[0].type;\n\n    if (type.includes(msg.dataModel)){\n        msg.sub_exists = true;\n        node.warn(\"There is already a subscription for this type.\")\n        break;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 220,
        "wires": [
            [
                "922ae5c915dbfef5"
            ]
        ]
    },
    {
        "id": "bc522295a33c44e8",
        "type": "function",
        "z": "c41b7248cee84bf3",
        "g": "ac0b1ae0b3d6d0d5",
        "name": "Setup GET Request",
        "func": "msg.url = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1/subscriptions/?limit=100\";\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/ld+json';\nmsg.headers['NGSILD-Tenant'] = env.get(\"FIWARE_SERVICE\");\nmsg.dataModel = \"WeatherObserved\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "e22b47130cab0aff"
            ]
        ]
    },
    {
        "id": "e22b47130cab0aff",
        "type": "http request",
        "z": "c41b7248cee84bf3",
        "g": "ac0b1ae0b3d6d0d5",
        "name": "http GET Request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "2a90adb0c7c87f69"
            ]
        ]
    },
    {
        "id": "922ae5c915dbfef5",
        "type": "switch",
        "z": "c41b7248cee84bf3",
        "g": "ac0b1ae0b3d6d0d5",
        "name": "",
        "property": "sub_exists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 280,
        "wires": [
            [
                "dd05473a52b6b668"
            ],
            [
                "efc1dbde7ca33800"
            ]
        ]
    },
    {
        "id": "dd05473a52b6b668",
        "type": "debug",
        "z": "c41b7248cee84bf3",
        "g": "ac0b1ae0b3d6d0d5",
        "name": "debug 83",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 540,
        "y": 280,
        "wires": []
    },
    {
        "id": "c345fc4b7d75c548",
        "type": "comment",
        "z": "c41b7248cee84bf3",
        "g": "ac0b1ae0b3d6d0d5",
        "name": "Because of what Stellio does to the type used in subcriptions, the check is only checking if existing subscriptions are on a type containing a specified datamodel and not if it is equal to.",
        "info": "",
        "x": 680,
        "y": 180,
        "wires": []
    },
    {
        "id": "7a1e7516db7233dd",
        "type": "inject",
        "z": "c41b7248cee84bf3",
        "g": "40411f41f2a1329e",
        "name": "Go!",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 540,
        "wires": [
            [
                "0a5fa65bb808e3f5"
            ]
        ]
    },
    {
        "id": "0a5fa65bb808e3f5",
        "type": "function",
        "z": "c41b7248cee84bf3",
        "g": "40411f41f2a1329e",
        "name": "Setup Request",
        "func": "msg.url = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1/entities/urn:sdm:WaterObserved:konstanz:pegelstand-906\";\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/ld+json';\nmsg.headers['NGSILD-Tenant'] = env.get(\"FIWARE_SERVICE\");\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 540,
        "wires": [
            [
                "981249c2044a8134"
            ]
        ]
    },
    {
        "id": "981249c2044a8134",
        "type": "http request",
        "z": "c41b7248cee84bf3",
        "g": "40411f41f2a1329e",
        "name": "http GET Request",
        "method": "DELETE",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 540,
        "wires": [
            [
                "773aa9ef6eb2d64d"
            ]
        ]
    },
    {
        "id": "773aa9ef6eb2d64d",
        "type": "debug",
        "z": "c41b7248cee84bf3",
        "g": "40411f41f2a1329e",
        "name": "debug 87",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 820,
        "y": 540,
        "wires": []
    },
    {
        "id": "e526c238784a6726",
        "type": "http request",
        "z": "c41b7248cee84bf3",
        "g": "db407cc6de5d87f9",
        "name": "http POST Request",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 820,
        "wires": [
            [
                "f5a278a18ffda563"
            ]
        ]
    },
    {
        "id": "0cfceafdeea8f353",
        "type": "inject",
        "z": "c41b7248cee84bf3",
        "g": "db407cc6de5d87f9",
        "name": "Go!",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 700,
        "wires": [
            [
                "efc3e6cd1f6b238a"
            ]
        ]
    },
    {
        "id": "f5a278a18ffda563",
        "type": "debug",
        "z": "c41b7248cee84bf3",
        "g": "db407cc6de5d87f9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 750,
        "y": 820,
        "wires": []
    },
    {
        "id": "40352197556535f8",
        "type": "function",
        "z": "c41b7248cee84bf3",
        "g": "db407cc6de5d87f9",
        "name": "Setup Request",
        "func": "msg.url = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1/subscriptions\";\n\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/ld+json';\nmsg.headers['NGSILD-Tenant'] = env.get(\"FIWARE_SERVICE\");\n\nmsg.payload = {\n   \t\"type\": \"Subscription\",\n\t\"subscriptionName\": \"Subscription for entity type \" + msg.dataModel + \".\",\n\t\"description\": \"This subscription triggers everytime an entity from type \" + msg.dataModel + \" is updated. Only watching attribute dateObserved to avoid duplications.\",\n   \t\"entities\": [\n\t\t{\n\t\t\t\"type\": msg.dataModel\n   \t\t}\n\t],\n    \"watchedAttributes\": [\"dateObserved\"],\n\t\"notificationTrigger\": [\"entityCreated\", \"attributeCreated\", \"attributeUpdated\"],\n    \"notification\": {\n       \t\"format\": \"normalized\",\n       \t\"endpoint\": {\n\t\t\t\t  \"uri\": env.get(\"QL_LD_API_URL\") + \"/v2/notify\",\n          \t\"accept\": \"application/json\"\n       \t}\n    },\n    \"@context\": [\n\t\t`https://context.${ env.get(\"DOMAIN\") }/main-context.jsonld`\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 820,
        "wires": [
            [
                "e526c238784a6726"
            ]
        ]
    },
    {
        "id": "f61eda6655aa56de",
        "type": "function",
        "z": "c41b7248cee84bf3",
        "g": "db407cc6de5d87f9",
        "name": "Check if already exists",
        "func": "msg.sub_exists = false;\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    const type = msg.payload[i].entities[0].type;\n\n    if (type.includes(msg.dataModel)){\n        msg.sub_exists = true;\n        node.warn(\"There is already a subscription for this type.\")\n        break;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 700,
        "wires": [
            [
                "76e9a5ca014009e0"
            ]
        ]
    },
    {
        "id": "efc3e6cd1f6b238a",
        "type": "function",
        "z": "c41b7248cee84bf3",
        "g": "db407cc6de5d87f9",
        "name": "Setup GET Request",
        "func": "msg.url = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1/subscriptions/?limit=100\";\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/ld+json';\nmsg.headers['NGSILD-Tenant'] = env.get(\"FIWARE_SERVICE\");\nmsg.dataModel = \"WeatherForecast\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 700,
        "wires": [
            [
                "43b88dd053b05891"
            ]
        ]
    },
    {
        "id": "43b88dd053b05891",
        "type": "http request",
        "z": "c41b7248cee84bf3",
        "g": "db407cc6de5d87f9",
        "name": "http GET Request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 700,
        "wires": [
            [
                "f61eda6655aa56de"
            ]
        ]
    },
    {
        "id": "76e9a5ca014009e0",
        "type": "switch",
        "z": "c41b7248cee84bf3",
        "g": "db407cc6de5d87f9",
        "name": "",
        "property": "sub_exists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 760,
        "wires": [
            [
                "e3a2b9122e39ce50"
            ],
            [
                "40352197556535f8"
            ]
        ]
    },
    {
        "id": "e3a2b9122e39ce50",
        "type": "debug",
        "z": "c41b7248cee84bf3",
        "g": "db407cc6de5d87f9",
        "name": "debug 88",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 760,
        "wires": []
    },
    {
        "id": "6ebaf929cb8dbb67",
        "type": "comment",
        "z": "c41b7248cee84bf3",
        "g": "db407cc6de5d87f9",
        "name": "Because of what Stellio does to the type used in subcriptions, the check is only checking if existing subscriptions are on a type containing a specified datamodel and not if it is equal to.",
        "info": "",
        "x": 680,
        "y": 660,
        "wires": []
    },
    {
        "id": "fd550fcf054d0df1",
        "type": "debug",
        "z": "c41b7248cee84bf3",
        "name": "debug 89",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 20,
        "wires": []
    },
    {
        "id": "5685f8736b810234",
        "type": "comment",
        "z": "c41b7248cee84bf3",
        "name": "does not work",
        "info": "",
        "x": 1010,
        "y": 440,
        "wires": []
    },
    {
        "id": "61a0fd5022769401",
        "type": "comment",
        "z": "c41b7248cee84bf3",
        "name": "does not work",
        "info": "",
        "x": 1010,
        "y": 80,
        "wires": []
    },
    {
        "id": "0e7f532481377f0a",
        "type": "comment",
        "z": "c41b7248cee84bf3",
        "name": "does not work",
        "info": "",
        "x": 1010,
        "y": 540,
        "wires": []
    },
    {
        "id": "b9cf21e32692ba9f",
        "type": "comment",
        "z": "c41b7248cee84bf3",
        "g": "ac0b1ae0b3d6d0d5",
        "name": "always false, because GET does not work",
        "info": "",
        "x": 1140,
        "y": 220,
        "wires": []
    },
    {
        "id": "d2761ddb666dd807",
        "type": "comment",
        "z": "c41b7248cee84bf3",
        "g": "ac0b1ae0b3d6d0d5",
        "name": "error code shows success, but data does not find its way to QL",
        "info": "",
        "x": 1100,
        "y": 340,
        "wires": []
    },
    {
        "id": "d5ed8f1c0db93461",
        "type": "comment",
        "z": "c41b7248cee84bf3",
        "g": "db407cc6de5d87f9",
        "name": "error code shows success, but data does not find its way to QL",
        "info": "",
        "x": 1080,
        "y": 820,
        "wires": []
    },
    {
        "id": "300d380e5acaa002",
        "type": "comment",
        "z": "c41b7248cee84bf3",
        "g": "db407cc6de5d87f9",
        "name": "always false, because GET does not work",
        "info": "",
        "x": 1140,
        "y": 700,
        "wires": []
    },
    {
        "id": "0f4f987967cd5ee1",
        "type": "inject",
        "z": "0aabdc139449829a",
        "name": "Name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "DOMAIN",
        "payloadType": "str",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "0993ad2062d69031"
            ]
        ]
    },
    {
        "id": "0993ad2062d69031",
        "type": "function",
        "z": "0aabdc139449829a",
        "name": "env.get",
        "func": "msg.payload = env.get(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 60,
        "wires": [
            [
                "7fff2e2870ed2234"
            ]
        ]
    },
    {
        "id": "7fff2e2870ed2234",
        "type": "debug",
        "z": "0aabdc139449829a",
        "name": "DOMAIN",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 480,
        "y": 60,
        "wires": []
    },
    {
        "id": "a7a0b924e88371c1",
        "type": "inject",
        "z": "0aabdc139449829a",
        "name": "Name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "STELLIO_API_URL",
        "payloadType": "str",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "ba6f6964b310b054"
            ]
        ]
    },
    {
        "id": "ba6f6964b310b054",
        "type": "function",
        "z": "0aabdc139449829a",
        "name": "env.get",
        "func": "msg.payload = env.get(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 140,
        "wires": [
            [
                "5a1ed329cfd10f13"
            ]
        ]
    },
    {
        "id": "5a1ed329cfd10f13",
        "type": "debug",
        "z": "0aabdc139449829a",
        "name": "STELLIO_API_URL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 520,
        "y": 140,
        "wires": []
    },
    {
        "id": "4768ae2bab44024d",
        "type": "inject",
        "z": "0aabdc139449829a",
        "name": "Name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "QL_LD_API_URL",
        "payloadType": "str",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "101e94347691c7c7"
            ]
        ]
    },
    {
        "id": "101e94347691c7c7",
        "type": "function",
        "z": "0aabdc139449829a",
        "name": "env.get",
        "func": "msg.payload = env.get(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 220,
        "wires": [
            [
                "a81cdee55b7c10ac"
            ]
        ]
    },
    {
        "id": "a81cdee55b7c10ac",
        "type": "debug",
        "z": "0aabdc139449829a",
        "name": "QL_LD_API_URL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 510,
        "y": 220,
        "wires": []
    },
    {
        "id": "d11fbb12a6196c0d",
        "type": "inject",
        "z": "0aabdc139449829a",
        "name": "Name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "FIWARE_SERVICE",
        "payloadType": "str",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "57e35619f937b39d"
            ]
        ]
    },
    {
        "id": "57e35619f937b39d",
        "type": "function",
        "z": "0aabdc139449829a",
        "name": "env.get",
        "func": "msg.payload = env.get(msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 300,
        "wires": [
            [
                "f68b787bbae78b25"
            ]
        ]
    },
    {
        "id": "f68b787bbae78b25",
        "type": "debug",
        "z": "0aabdc139449829a",
        "name": "FIWARE_SERVICE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 510,
        "y": 300,
        "wires": []
    }
]